import{_ as s,o as a,c as n,V as l}from"./chunks/framework.cd55fae3.js";const p="/vp-blog/assets/01.90a3f4e6.png",A=JSON.parse('{"title":"iOS Swift 工程集成 React Native","description":"","frontmatter":{"title":"iOS Swift 工程集成 React Native","date":"2023-04-14T11:13:49.000Z","tags":["React Native","Swift","iOS"],"layout":"post","cover":{"image":"/vp-blog/covers/react-native.png"}},"headers":[],"relativePath":"docs/posts/ios-swift-工程集成-react-native.md","filePath":"docs/posts/ios-swift-工程集成-react-native.md","lastUpdated":1713356112000}'),e={name:"docs/posts/ios-swift-工程集成-react-native.md"},o=l('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>看了很多 React Native 教程，大多都是通过官方脚手架创建出的项目，同时包含 iOS 和 Android 的。</p><p>实际目前很多公司的开发模式和这种其实是不一样的，更多是向已有的的工程中集成 React Native。</p><p>我也尝试在一个独立的 iOS Swift 项目中，尝试部分页面接入 RN。</p><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><p>目标就是如图中所示，可以通过 iOS 端的按钮点击，唤起 React Native 开发的简单页面。</p><p><img src="'+p+`" alt="01.png"></p><h2 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h2><p>首先，创建 RN 工程，这一步和全 RN 开发并无不同，我们依然借助脚手架初始化工程。</p><p>App 页面是官方的示例页面，我将它改成了简单的 Hello world。</p><p><code>index.js</code> 是入口文件，并没有做任何修改，把代码贴出来是希望注意到 <code>registerComponent</code> 方法，它的第一个参数 <code>appName</code> 会在原生端用到。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">format</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">AppRegistry</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-native</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">appName</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./app.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">AppRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerComponent</span><span style="color:#BABED8;">(appName</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> App)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着，我们创建 iOS Swift 工程，这是通过 XCode 创建的，一路下一步，没有什么可以多说的。</p><p>然后，我们需要通过 Cocoapods 安装依赖，这里说一下不要按照 React Native 中文网提供的 podfile 来编写，可以参考脚手架里的 iOS 项目去编写依赖。</p><p>我们只需要一个 <code>ViewController</code>, 通过 <code>StoryBoard</code> 创建一个按钮，绑定一个 <code>tap</code> 事件即可。</p><p>在事件的回调函数中，我们就可以创建我们的 RN 视图，并加载它，代码如下：</p><div class="language-swift line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">UIKit</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">React</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ViewController</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">UIViewController </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">override</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">func</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">viewDidLoad</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        super.</span><span style="color:#82AAFF;">viewDidLoad</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Do any additional setup after loading the view.</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">IBAction</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">func</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">onClick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">_</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">sender</span><span style="color:#BABED8;">: </span><span style="color:#FFCB6B;">Any</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">let</span><span style="color:#BABED8;"> bridge </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">RCTBridge</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">delegate</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">MyReactNativeBridge</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">let</span><span style="color:#BABED8;"> rootView </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">RCTRootView</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">bridge</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> bridge</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">, </span><span style="color:#82AAFF;">moduleName</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hybridrn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">, </span><span style="color:#82AAFF;">initialProperties</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">nil)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">let</span><span style="color:#BABED8;"> vc </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">UIViewController</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">        vc.modalPresentationStyle </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> .fullScreen</span></span>
<span class="line"><span style="color:#BABED8;">        vc.view </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> rootView</span></span>
<span class="line"><span style="color:#BABED8;">        self.</span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">vc, </span><span style="color:#82AAFF;">sender</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">nil)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">MyReactNativeBridge</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">NSObject</span><span style="color:#BABED8;">, </span><span style="color:#FFCB6B;">RCTBridgeDelegate </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">func</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">sourceURL</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">for</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">bridge</span><span style="color:#BABED8;">: RCTBridge</span><span style="color:#89DDFF;">!)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> URL</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">string</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:8081/index.bundle?platform=ios</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>我们创建了一个 <code>bridge</code> 对象，他的 <code>delegate</code> 实现了 <code>RCTBridgeDelegate</code>, 通过 <code>sourceURL</code> 去加载 js bundle 的地址。</p><p>随后就是通过 <code>RCRootView</code> 创建出视图，然后展示即可，其中 <code>moduleName</code> 就需要传之前的 appName。</p><p>一般混合开发中，我们就可以注册很多的 module，原生去负责这些页面的跳转。</p><h2 id="避坑指南" tabindex="-1">避坑指南 <a class="header-anchor" href="#避坑指南" aria-label="Permalink to &quot;避坑指南&quot;">​</a></h2><p>这样配置完成后，在开发阶段，我们就可以在这个项目中预览我们 RN 开发的页面了，它的热更新也是没有问题的。</p><p>但是，在我一次测试中，RN 端如果有报错，模拟器上如果我们显示了 LogBox 的话，下次热更新生效前，iOS App 就会崩溃。</p><p>经过排查后，发现是 iOS 这边 React Native 的包里，如下这段代码出现了问题：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">dealloc</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">RCTSharedApplication</span><span style="color:#89DDFF;">().</span><span style="color:#BABED8;">delegate</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">window</span><span style="color:#F07178;"> makeKeyWindow</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>原因是我们新创建的 iOS 工程里，window 已经不再 AppDelegate 类中有声明了，我们可以在 AppDelegate 里声明一下：<code>var window: UIWindow?</code>,</p><p>这样，我们就可以在原生 iOS 项目里开发 RN 了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>整个集成过程并不难，也遇到了两个比较坑的点，一是 cocoapods 的依赖文件一开始参考的 RN 中文网，估计是很久以前的版本了，怎么都成功不了；二是遇到热更新的问题， 在经过调试后，也顺利解决了。</p><p>开发阶段我们就去加载 bundle 的地址是没有问题的；如果是线上版本，混合开发模式应该是要有一套下载 bundle 的策略，让 App 去加载本地 bundle，这又是个值得去学习的点了。</p><p>这也让我理解了为什么 RN 能够热更新了，bundle 就是个 js 文件，我们只要替换这个文件地址或者文件就能实现应用的更新。</p><p>RN 的出现确实让前端繁荣了一段时间，但是这究竟是好事还是坏事呢，前端已死？客户端已死？</p>`,32),t=[o];function c(r,i,D,y,F,B){return a(),n("div",null,t)}const b=s(e,[["render",c]]);export{A as __pageData,b as default};
