import{_ as s,o as n,c as a,V as e}from"./chunks/framework.cd55fae3.js";const u=JSON.parse('{"title":"学习 React Hooks（一）","description":"useId, useSyncExternalStore, useTransition","frontmatter":{"title":"学习 React Hooks（一）","description":"useId, useSyncExternalStore, useTransition","date":"2023-06-01T04:34:27.000Z","tags":["React"],"layout":"post","cover":{"image":"/vp-blog/covers/react.jpeg"}},"headers":[],"relativePath":"docs/posts/learn-hook-1.md","filePath":"docs/posts/learn-hook-1.md","lastUpdated":1713356112000}'),l={name:"docs/posts/learn-hook-1.md"},p=e(`<h2 id="useid" tabindex="-1">useId <a class="header-anchor" href="#useid" aria-label="Permalink to &quot;useId&quot;">​</a></h2><p><code>useId</code> 是一个 React Hook，可以生成传递给无障碍属性的唯一 ID。</p><p>官网目前只提到了，这个是为了无障碍而使用的，国内感觉不是太注重这一块，可以简单了解一下。</p><p><code>useId</code> 不应该被用来生成列表中的 key。key 应该有你的数据生成。</p><p>遵循官网，只用于无障碍，不要用别的地方。</p><p>** 使用无障碍时，为什么要用它，不能写死字符串吗？**</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> passwordHintId </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">useId</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">aria-describedby</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">passwordHintId</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">passwordHintId</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们可以看到，无障碍属是如上代码这么使用的，如果当我们这个组件在页面上多次使用时，会出现多个相同 id 的元素，这违反了 id 必须唯一的原则。</p><p>** 能不能自己维护一个自增的 id？**</p><p>客户端渲染时，是可以的但是没有必要。而且如果你是服务端渲染，使用自增计数器会非常困难。</p><p>更多内容可以参考：<a href="https://zh-hans.react.dev/reference/react/useId" target="_blank" rel="noreferrer">https://zh-hans.react.dev/reference/react/useId</a></p><h2 id="usesyncexternalstore" tabindex="-1">useSyncExternalStore <a class="header-anchor" href="#usesyncexternalstore" aria-label="Permalink to &quot;useSyncExternalStore&quot;">​</a></h2><p><code>useSyncExternalStore</code> 是一个让你订阅外部 store 的 React Hook。</p><p>前一段时间，在<a href="/vp-blog/docs/posts/实现react-redux.html">手写 React-Redux</a> 中，我用到了这个 hook。官方文档也差不多举了一个 store 的例子。</p><p>另外，官网提供的另一个例子是用来订阅浏览器的状态，代码如下：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">useSyncExternalStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">ChatIndicator</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">isOnline</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useSyncExternalStore</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">subscribe</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">getSnapshot</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#BABED8;">isOnline </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">✅ Online</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">❌ Disconnected</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">navigator</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">onLine</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">online</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">offline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">online</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">offline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">callback</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>没有这个 hook，我们也能完成类似的功能，比如借助 <code>useState</code> 和 <code>useEffect</code> 也能做到，可以认为是一种比较简单的写法。</p><p>可以认为 <code>useSyncExternalStore</code> 会返回一个 state，当 state 变换时我们的界面会被更新。</p><p><code>subscribe</code> 可以添加订阅，它的返回值需要能够删除订阅。</p><p><code>getSnapshot</code> 是获取我们所需 state 的方法，它会在订阅被触发时调用。</p><p>更多内容可以参考：<a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore" target="_blank" rel="noreferrer">https://zh-hans.react.dev/reference/react/useSyncExternalStore</a></p><h2 id="usetransition" tabindex="-1">useTransition <a class="header-anchor" href="#usetransition" aria-label="Permalink to &quot;useTransition&quot;">​</a></h2><p><code>useTransition</code> 是一个让你在不阻塞 UI 的情况下来更新状态的 React Hook。</p><p>它返回一个 <code>isPending</code> 和 <code>startTransition</code>，分别返回我们是一个否是挂起的状态与一个将状态更新标记为 transition(暂时不知道这么翻译准确)。</p><p>React 里可以直接导入一个 <code>startTransition</code>，区别就是我们不能知道 <code>isPending</code>，以及它不受 hooks 规则的限制。</p><p>我们只应该在 <code>setXXX</code> 这样的 的状态时使用 <code>startTransition</code>，其他的情况可以尝试使用 <code>useDeferredValue</code>。父组件传递过来的更新方法也是可以被调用的。</p><p>传递给 <code>startTransition</code> 的函数必须时同步的。</p><p>不要用于控制文本输入。</p><p>官方文档的场景时选项卡切换：有三个选项卡，其中切换第二个选项卡需要一点时间，在不使用 <code>useTransition</code> 时，我们点击第二个选项卡后，立刻点击第三个选项卡，此时会有明显的卡顿后才能切换。</p><p>使用了 <code>useTransition</code> 后，情况会非常不同，不再卡顿了，第二个选项卡的渲染被放弃了，能够快速显示第三个选项卡。</p><p>做的好一点，我们可以利用 <code>isPending</code>, 在选项卡上做比较“轻”的提示，提示用户渲染正在进行。</p><p>官网还提到了它可以避免不必要的加载指示器，这是配合 <code>Suspense</code> 时使用的问题。</p><p>记得刚到 Shopee 做 Entry Task 的时候，就用这个 <code>Suspense</code>，做一个列表滚动加载时，每次会先更新到 <code>fallback</code> 状态，然后重新渲染列表。当时就放弃使用 <code>Suspense</code> 了，当时其实可以利用 <code>useTransiton</code> 解决。</p><p>后面，官网推荐使用路由时，推荐使用这个 hook，其实也是使用了 <code>Suspense</code> 的情况。</p><p>需要注意的是，下方代码输出顺序依然是 <code>1 2 3</code>, 只是由此产生的更新任务是非紧急的更新。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">startTransition</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setPage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>更多内容可以参考：<a href="https://zh-hans.react.dev/reference/react/useTransition" target="_blank" rel="noreferrer">https://zh-hans.react.dev/reference/react/useTransition</a></p>`,37),o=[p];function t(r,c,F,y,D,i){return n(),a("div",null,o)}const b=s(l,[["render",t]]);export{u as __pageData,b as default};
