import{_ as s,o as n,c as a,V as p}from"./chunks/framework.c7ac9774.js";const A=JSON.parse('{"title":"创建自己的小工具","description":"","frontmatter":{"title":"创建自己的小工具","date":"2023-05-12T02:27:16.000Z","tags":["Node.js"],"layout":"post","cover":{"image":"/vp-blog/covers/nodejs.png"}},"headers":[],"relativePath":"docs/posts/创建自己的小工具.md","filePath":"docs/posts/创建自己的小工具.md","lastUpdated":1707963076000}'),l={name:"docs/posts/创建自己的小工具.md"},o=p(`<p>从 hexo 迁移到 vitepress 后，没有发现可以快速创建 post 的命令。</p><p>手动创建，如果想要精确的设置一个创建时间还是有一点小繁琐的，所以需要一个小脚本帮助我来快速的创建文章的文件。</p><p>其实，很多时候如果想太多，可能反而会拖累自己，比如我会想，如果创建的文章同名了怎么办？要不要用一些脚手架的三方库来做？要不要发布成库全局安装？</p><p>后来转念一想，这些问题其实都不是问题。</p><p>如果创建文章不小心由于同名覆盖了我原来的文章，我完全可以通过 git 的历史找回来。</p><p>至于脚手架，也不需要那么重，毕竟用户是我自己，我只需要解决自己的需求就可以了。</p><p>实际脚本也非常简单，只需要内置库即可，dayjs 是本来自定义主题时用到的库，顺手就用来获取时间了。</p><p>不需要发布成包或者打包成库全局安装，就在我自己的 blog 项目下即可，需要时我只需要通过命令行去调用创建对应的文件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node:fs/promises</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dayjs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dayjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">dir</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">process</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">argv</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">filename</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">process</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">argv</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.md</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#BABED8;">dir</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">filename</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">---</span></span>
<span class="line"><span style="color:#C3E88D;">title: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">process</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">argv[</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">date: </span><span style="color:#89DDFF;">\${</span><span style="color:#82AAFF;">dayjs</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YYYY-MM-DD HH:mm:ss</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">tags: []</span></span>
<span class="line"><span style="color:#C3E88D;">layout: post</span></span>
<span class="line"><span style="color:#C3E88D;">cover:</span></span>
<span class="line"><span style="color:#C3E88D;">  image: ***</span></span>
<span class="line"><span style="color:#C3E88D;">---</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>有时候，真的不需要想太多，代码是可以迭代的。每次解决对应的需求和痛点即可。</p><h2 id="遇到的问题或收获" tabindex="-1">遇到的问题或收获 <a class="header-anchor" href="#遇到的问题或收获" aria-label="Permalink to &quot;遇到的问题或收获&quot;">​</a></h2><p>发现 node 的内置库出现了很多的 <code>node:*/promise</code> 形式的包，当然比起以前的 callback 形式好了很多，但是不清楚是什么时候引入的。</p><p>可以通过 <code>progress.argv</code> 获取脚本是怎么被命令行调用的。</p><p>模版字符串，如果不想有多余的换行就必须顶格写，有点破坏原来的代码风格，虽然不是大问题，但可以看看有什么解决方案。</p>`,14),e=[o];function r(c,t,y,D,F,i){return n(),a("div",null,e)}const E=s(l,[["render",r]]);export{A as __pageData,E as default};
