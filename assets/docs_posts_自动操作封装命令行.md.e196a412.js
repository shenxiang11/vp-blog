import{_ as e,o as a,c as s,V as o}from"./chunks/framework.09b837aa.js";const t="/vp-blog/assets/08.530251ac.png",l="/vp-blog/assets/09.5067369f.png",p="/vp-blog/assets/10.21c893e6.gif",b=JSON.parse('{"title":"自动操作封装命令行","description":"","frontmatter":{"title":"自动操作封装命令行","date":"2023-05-15T00:30:13.000Z","tags":["macOS","Shell"],"layout":"post","cover":{"image":"https://plus.unsplash.com/premium_photo-1681126366707-8abb18f5ec5a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=3432&q=80"}},"headers":[],"relativePath":"docs/posts/自动操作封装命令行.md","filePath":"docs/posts/自动操作封装命令行.md","lastUpdated":1684631254000}'),i={name:"docs/posts/自动操作封装命令行.md"},n=o('<h2 id="开端" tabindex="-1">开端 <a class="header-anchor" href="#开端" aria-label="Permalink to &quot;开端&quot;">​</a></h2><p>最近在博客中，会比较频繁地遇到把视频转成 gif 图片的需求。</p><p>我常用的就是这个个 ffmpeg 命令了：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ffmpeg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">source.mp4</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target.gif</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每次都输入那么一串命令，难免不容易记住，好在 macOS 上有系统的“自动操作”软件。</p><h2 id="自动操作" tabindex="-1">自动操作 <a class="header-anchor" href="#自动操作" aria-label="Permalink to &quot;自动操作&quot;">​</a></h2><p><img src="'+t+'" alt=""></p><p>感觉这个软件非常像 iPhone 上的捷径，可以把功能做的很强大。 但是这次我只需要执行 shell 的能力。</p><p>就像图中可以看到的，我们应用的文件对象是影片文件，可以在访达中使用这个自动操作。</p><p>随后，我们将运行 Shell 脚本里的传递输入改为：作为自变量。</p><ul><li><code>fileName=$1</code> 就是我们的视频文件</li><li><code>uuid=$(uuidgen)</code> 是作为 gif 图片的文件名，我不希望它会覆盖其他文件，所以用了 uuid</li><li><code>dir=$(dirname $fileName)</code> 是获取视频文件所在路径，我希望 gif 生成在视频文件的相同目录下</li><li><code>targetName=${dir}/${uuid}&quot;.gif&quot;</code> 这是对上面参数的拼接，拼接成文件名</li><li><code>/usr/local/bin/ffmpeg -i $fileName -r 15 $targetName</code> 这就是对命令的执行，我试了一下不能像在常规的命令行里直接使用 <code>ffmpeg</code>，即使它已经加入了环境变量</li></ul><p>保存后，我们右击视频文件后将会看到我们的自动操作会出现在如图片中的菜单里：</p><p><img src="'+l+'" alt=""></p><p>点击这个快速操作后，我们能得到我们的 gif 图片了。</p><p><img src="'+p+'" alt=""></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>自动操作是个封装命令的好帮手，它的功能远不止文中的自动转 gif 图片的命令，值得继续探索。</p><p>你可以封装出适合你自己的自动操作。</p>',18),c=[n];function r(d,_,m,f,u,h){return a(),s("div",null,c)}const C=e(i,[["render",r]]);export{b as __pageData,C as default};
